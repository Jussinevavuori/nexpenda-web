import { HistoryEventAlreadyRestoredFailure } from "../result/Failures";
import { v4 as uuid } from "uuid";

/**
 * Describes an event that will be pushed to the history stack that
 * can be restored via an undo command.
 */
export class HistoryEvent<T = void> {
  /**
   * Unique, autogenerated ID for historyevent
   */
  readonly id: string;

  /**
   * The type of history event
   */
  readonly type: string;

  /**
   * The time when the event was created
   */
  readonly time: Date;

  /**
   * Private flag for whether or not the restoration function for
   * this instance was run.
   */
  private _restored: boolean;

  /**
   * Flag for whether or not the restoration function for this
   * instance was run.
   */
  get restored() {
    return this._restored;
  }

  /**
   * Check if the event can be restored i.e. does it have a
   * restoration strategy
   */
  get canBeRestored() {
    return !!this.restorationStrategy;
  }

  /**
   * Has this history event already been displayed to the user
   */
  displayed: boolean = false;

  /**
   * The restoration function to use upon undo
   */
  readonly restorationStrategy: undefined | (() => MaybePromise<T>);

  constructor(type: string, restorationStrategy?: () => MaybePromise<T>) {
    this.id = uuid();
    this.type = type;
    this.time = new Date();
    this.restorationStrategy = restorationStrategy;
    this._restored = false;
  }

  /**
   * Function to restore the event and notify
   */
  restore() {
    if (this._restored) {
      return new HistoryEventAlreadyRestoredFailure();
    }
    if (this.restorationStrategy) {
      this._restored = true;
      return this.restorationStrategy();
    }
  }
}
